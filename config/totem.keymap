//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define HOST_OS 2


#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include "zmk-helpers/unicode-chars/russian.dtsi"
#include <behaviors.dtsi>

#define ___ &trans
#define BASE 0
#define RUS  1
#define NAV  2
#define DIG  3
#define SYS  4

#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

// left russian home row
//MAKE_HRM(hml_ctrl, &kp, &ru_f, KEYS_R THUMBS)
MAKE_HRM(hml_ctrl, &lm, &ru_f, KEYS_R THUMBS)
MAKE_HRM(hml_opt, &kp, &ru_bi, KEYS_R THUMBS)
MAKE_HRM(hml_shift, &kp, &ru_v, KEYS_R THUMBS)
MAKE_HRM(hml_layer_ru, &mo, &ru_a, KEYS_R THUMBS)


// right russian home row
MAKE_HRM(hmr_ctrl, &kp, &ru_zh, KEYS_L THUMBS)
MAKE_HRM(hmr_opt, &kp, &ru_d, KEYS_L THUMBS)
MAKE_HRM(hmr_shift, &kp, &ru_l, KEYS_L THUMBS)
MAKE_HRM(hmr_cmd, &lm, &ru_o, KEYS_L THUMBS)

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_eng {
            timeout-ms = <150>;
            key-positions = <0 1>;
            bindings = <&to_eng>;
            require-prior-idle-ms = <100>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <70>;
        };

        opt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <16 17 18>;
            timeout-ms = <70>;
        };

        shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 12>;
            timeout-ms = <100>;
        };

        to_digits_layer {
            bindings = <&to 3>;
            key-positions = <32 37>;
        };

        combo_to_rus {
            bindings = <&to_russian>;
            key-positions = <9 8>;
            timeout-ms = <150>;
            require-prior-idle-ms = <100>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */
        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };

        to_russian: to_russian {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp LA(LG(LC(F)))>;
            label = "TO_RUSSIAN";
        };

        to_eng: to_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp LC(LA(LG(D)))>;
            label = "TO_ENG";
        };
    };

    behaviors {

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_sh_or_shch: ru_sh_or_shch {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_SH_OR_SHCH";
            bindings = <&ru_shch>, <&ru_sh>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_b_or_coma: ru_b_or_coma {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_SH_OR_SHCH";
            bindings = <&kp>, <&ru_b>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        ru_yu_or_dot: ru_yu_or_dot {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_SH_OR_SHCH";
            bindings = <&kp>, <&ru_yu>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

    };

    keymap {
        compatible = "zmk,keymap";

        Norman {
            label = "BASE";
            bindings = <
//          ╭──────────────┬─────────────┬──────────────┬────────────────┬─────────────╮        ╭─────────────┬──────────────────┬──────────────┬──────────────────┬──────────────────────╮
              &kp Q          &kp W         &lt 3 D        &kp F            &kp K                  &kp J         &kp U              &lt 3 R        &kp L              &mt COLON SEMICOLON
//          ├──────────────┼─────────────┼──────────────┼────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┤
              &hml LCTRL A   &hml LALT S   &hml LSHFT E   &hml_layer 2 T   &kp G                  &kp Y         &hmr RIGHT_GUI N   &hmr RSHFT I   &hmr RIGHT_ALT O   &hmr RIGHT_CONTROL H
// ╭────────┼──────────────┼─────────────┼──────────────┼────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┼──────────────────╮
     &kp TAB  &kp Z          &kp X         &kp C          &kp V            &kp B                  &kp P         &kp M              &kp COMMA      &kp DOT            &comment_or 0 SLASH    &mt DOUBLE_QUOTES SQT
// ╰────────┴──────────────┴─────────────┼──────────────┼────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┴──────────────────────┴──────────────────╯
                                           &mo 3         &sk LEFT_COMMAND  &kp SPACE              &kp RET       &lt 4 ESC          &mo 3
//                                       ╰──────────────┴────────────────┴─────────────╯        ╰─────────────┴──────────────────┴──────────────╯
            >;
        };

        rus {
            bindings = <
//          ╭───────────────────┬─────────────────┬───────────────────┬───────────────────┬─────────────╮     ╭─────────────┬──────────────────────────┬───────────────────────┬───────────────────────┬───────────────────────────────────╮
              &ru_y               &ru_ts            &ru_u               &ru_k               &ru_ye              &ru_n         &ru_g                      &ru_sh_or_shch O I      &ru_z                   &ru_kh
//          ├───────────────────┼─────────────────┼───────────────────┼───────────────────┼─────────────┤     ├─────────────┼──────────────────────────┼───────────────────────┼───────────────────────┼───────────────────────────────────┤
              &hml_ctrl 0 LCTRL   &hml_opt LALT S   &hml_shift LSHFT D  &hml_layer_ru 2 F   &ru_p               &ru_r         &hmr_cmd 0 RIGHT_COMMAND   &hmr_shift RSHFT K      &hmr_opt RIGHT_ALT L    &hmr_ctrl RIGHT_CONTROL SEMICOLON
// ╭────────┼───────────────────┼─────────────────┼───────────────────┼───────────────────┼─────────────┤     ├─────────────┼──────────────────────────┼───────────────────────┼───────────────────────┼───────────────────────────────────┼────────╮
     ___      &ru_ya              &ru_ch            &ru_s               &ru_m               &ru_i               &ru_t         &ru_tone                   &ru_b_or_coma COMMA 0   &ru_yu_or_dot DOT       ___                                 ___
// ╰────────┴───────────────────┴─────────────────┼───────────────────┼───────────────────┼─────────────┤     ├─────────────┼──────────────────────────┼───────────────────────┼───────────────────────┴───────────────────────────────────┴────────╯
                                                    ___                 ___            ___                      ___           ___                        ___
//                                                ╰───────────────────┴───────────────────┴─────────────╯     ╰─────────────┴──────────────────────────┴────────────────────╯
            >;
        };

        Navigation {
            label = "Navigation";
            bindings = <
//          ╭──────────────┬───────────────────────┬──────────────────────┬───────────────────┬─────────────╮        ╭─────────────┬──────────────────┬──────────────┬──────────────────┬──────────────────────╮
              ___            &kp LS(LG(NUMBER_3))    &kp LS(LG(NUMBER_4))   ___                 ___                    &none         &kp HOME           &kp UP         &kp END            &kt PAGE_UP
//          ├──────────────┼───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┤
              ___            ___                     ___                    ___                 ___                    &none         &kp LEFT           &kp DOWN       &kp RIGHT          &none
// ╭────────┼──────────────┼───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┼──────────────────────┼──────────────────╮
     ___      ___            ___                     ___                    ___                 ___                    &none         &kp LA(LEFT)       &none          &kp LA(RIGHT)      &kt PAGE_DOWN          &kp CAPSLOCK
// ╰────────┴──────────────┴───────────────────────┼──────────────────────┼───────────────────┼─────────────┤        ├─────────────┼──────────────────┼──────────────┼──────────────────┴──────────────────────┴──────────────────╯
                                                     &mo 3                  ___                 &kp SPACE              &kp RET       &lt 4 ESC          &mo 3
//                                                 ╰──────────────────────┴───────────────────┴─────────────╯        ╰─────────────┴──────────────────┴──────────────╯
            >;
        };


        digits {
            label = "Digits";
            bindings = <
        &kp PIPE                       &kp DOLLAR             &kp LEFT_BRACE                    &kp RIGHT_BRACE                 &press_two_keys GREATER_THAN EQUAL    &kp PLUS   &kp N7        &kp N8        &kp N9        &kp SEMICOLON
        &hml LEFT_CONTROL EXCLAMATION  &hml LEFT_ALT AT_SIGN  &hml LEFT_SHIFT LEFT_PARENTHESIS  &lt 2 RIGHT_PARENTHESIS         &press_two_keys MINUS GREATER_THAN    &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MULTIPLY
___  &kp AMPERSAND                  &kp LCTRL              &mt LESS_THAN LEFT_BRACKET        &mt GREATER_THAN RIGHT_BRACKET  &press_two_keys LESS_THAN EQUAL       &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD       &kp SLASH
                                                              ___                            ___                          ___                                ___     &kp N0        ___
            >;
        };

        sim_layer {
            label = "SYSTEM";
            bindings = <
            &kp F1  &kp F2  &kp F3        &kp F4      &kp F5        &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
            ___  ___  ___        ___      ___        &kp C_MUTE    &kp C_PP      ___      ___      ___
&bt BT_CLR  ___  ___  &out OUT_TOG  &bt BT_PRV  &bt BT_NXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  ___   ___
                            ___        ___      ___        ___        ___        ___
            >;
        };
    };
};
